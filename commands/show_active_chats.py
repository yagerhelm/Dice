from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from scripts.active_check import check_bot_active
from scripts.logger import log_command
from scripts.database import Database

router = Router()

@router.message(Command("active"))
@check_bot_active
async def show_active_chats_handler(message: Message) -> None:
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await Database.get_user(user_id)
        if not user_data or user_data['level'] < 5:
            await message.reply("‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        active_chats = await Database.get_active_chats()
        
        if not active_chats:
            await message.reply("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
            return
            
        response = "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:\n\n"
        for chat in active_chats:
            response += f"‚Ä¢ {chat['chat_title']} (ID: {chat['chat_id']})\n"
            
        await message.reply(response)
        
    except Exception as e:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    await log_command(message, message.text)
